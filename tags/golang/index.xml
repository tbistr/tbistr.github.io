<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>golang on Tbistr blog</title>
    <link>https://tbistr.github.io/tags/golang/</link>
    <description>Recent content in golang on Tbistr blog</description>
    <image>
      <title>Tbistr blog</title>
      <url>https://tbistr.github.io/images/coara.jpg</url>
      <link>https://tbistr.github.io/images/coara.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 06 Mar 2023 21:04:34 +0000</lastBuildDate><atom:link href="https://tbistr.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type aliasの使い所を提案</title>
      <link>https://tbistr.github.io/posts/tech/golang_typealias/</link>
      <pubDate>Mon, 06 Mar 2023 21:04:34 +0000</pubDate>
      
      <guid>https://tbistr.github.io/posts/tech/golang_typealias/</guid>
      <description>Go言語の謎機能である、Type aliasの使い所を説明</description>
    </item>
    
    <item>
      <title>Go言語で独自エラーを実装するときの実例(ライブラリ編)</title>
      <link>https://tbistr.github.io/posts/tech/golang_error_impl/</link>
      <pubDate>Mon, 21 Nov 2022 04:49:26 +0000</pubDate>
      
      <guid>https://tbistr.github.io/posts/tech/golang_error_impl/</guid>
      <description>概要 Goでライブラリを作るとき、呼び出し元でどのようにエラーハンドリングするか想像して実装することが出来ていますか? この記事では、minimalなサンプルを提示し、Goでの独自エラー実装について紹介します。
TODO: Asについては、僕がユースケースを理解できていないので書いていません。
前提 Goの文法は分かっているということを仮定します。
ライブラリ利用者側から見たGoのエラー処理について ご存知の通り、Goには高級?なエラー処理機構がありません。 関数が正常に終了したかどうかは、if文によって判定します。
func someFunc() error {...} err := someFunc() if err != nil { // 何か処理 } また、errorインターフェースの定義は以下のようになっていて、.Error()によって出力する文字列を作成できれば、どんなものでもerror型として扱うことが出来ます。
type error interface{ Error() string } そのため、ライブラリ作成者には独自エラーの構造体に対して、Error() stringを実装することが要求されます。
type myError struct{ // some member } func (err *myError) Error() string{ return &amp;#34;&amp;#34; } Unwrapの利用 上記のような独自エラーには、エラーが起こった原因となるエラーが何か判別出来ないという欠点がありました。 (正確には、判別のための標準的なインターフェースがなかった。)
Go1.13以降、エラー原因の特定インターフェースとして、errors.Unwrap(err) errorという関数が使えます。 これによって、ライブラリ使用者はエラーを引き起こしたエラーを取得することが出来ます。
err := someFunc() if err != nil { inner := errors.Unwrap(err) fmt.Printf(&amp;#34;内部エラーはこれ: %v&amp;#34;, inner) } Isの利用 エラー原因特定のユースケースとして、エラー種別によって処理を分けるというケースがあります。 このとき、エラーの原因の原因の原因&amp;hellip;のようにエラーが連鎖的にwrapされている場合、あるエラーと、その原因となったエラーの種別が同じものかを判定する必要があります。</description>
    </item>
    
  </channel>
</rss>
