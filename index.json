[{"content":"「Go言語 100Tips ありがちなミスを把握し、実装を最適化する」を読みました。 良い本だったので、紹介しようと思います。\nどんな本? Goのコードを書く上でありがちなミスや、より良い書き方について解説している本です。 対象読者はGoをある程度使ったことがある人で、基本的な文法だけでなくインタフェース機能や並行処理などの高度な機能を使ったことがある人が想定されていると感じました。\n簡単に章立てと内容を紹介します。\n章タイトル 内容 Go言語-学ぶのは容易、習得は難しい Go言語の概要と思想について コードとプロジェクト構成 インタフェースによる抽象化やパッケージレベルでの品質向上 データ型 スライス、マップを中心に背景のデータ構造から効率的な使い方を知る 制御構造 ループでのありがちなミス等を紹介 文字列 文字列のデータ構造と扱い方 関数とメソッド レシーバ、引数、返り値のベストプラクティス エラー管理 panic、ラップなどエラー処理の基本 並行処理：基本編 並行処理とは何か、Goでの扱われ方とありがちなミスについて 並行処理：実践編 チャネルやMutexを利用した高度な同期手法について 標準ライブラリ time, json, sql, httpなどの標準ライブラリの使い方、ありがちなミスを紹介 テスト Goのテストに便利なパッケージ、効率の良い実行方法について 最適化 GPUのキャッシュを背景に効率の良いコードの書き方、プロファイルの手法について 良かった点 全体的な特徴として感じたのは、解説の分量が特定の分野に寄っていないので、ユースケースを満遍なくカバーしていること。 また、各解説の中ではスライスやマップのデータ構造を共通軸に持っているものが多く、その辺の基本的な理解を汎用的なケースに応用できるようになっていると感じました。\n並行処理についての記述もかなり充実していて良かったです。 この本で一番ページが割かれている部分でもあり、章として2つに分かれています。 基本編ではそもそも並行処理とは何か、GoのランタイムとCPUコアの関係といった基礎知識から説明しているので、実際に並行処理を書いた経験が少ない人も読みやすいと思います。\n微妙だった点 翻訳本に共通する問題かと思うんですが、多少読みにくさはあります。 別に冗長ということでもないんですが、目が滑る感覚があって多少読むのに時間がかかりました。\nまとめ とりあえず、Goをガンガン使っている人は読んでおいて損はないと思います。\nこの本で扱われているTipsにはベストプラクティス（こうした方がいい）と、アンチパターン（これしちゃダメ）があります。 このうちアンチパターンの方は知っていないと避けられないものもあるので、特に重要だと思います。 なので、ざーっと目を通しておいてアンチパターンに遭遇したとき「なんかこれヤバそうだな」と思える程度にアンテナを張っておくのもオススメの読み方です。\n個人的には、ループ内でのスライス、deferの扱いが特に参考になりました。 逆に、最適化の章はページ数が割かれている割に使う機会が少なそうだと感じました。 （章の最初に「読みやすいコードは最適化されて複雑なコードより良い」と明言されているので、実際著者としてもそういう認識と意図があるんだと思います。）\nかなりおすすめでーす。\n","permalink":"https://tbistr.github.io/posts/book/golang_100tips/","summary":"「Go言語 100Tips ありがちなミスを把握し、実装を最適化する」を読みました。 良い本だったので、紹介しようと思います。\nどんな本? Goのコードを書く上でありがちなミスや、より良い書き方について解説している本です。 対象読者はGoをある程度使ったことがある人で、基本的な文法だけでなくインタフェース機能や並行処理などの高度な機能を使ったことがある人が想定されていると感じました。\n簡単に章立てと内容を紹介します。\n章タイトル 内容 Go言語-学ぶのは容易、習得は難しい Go言語の概要と思想について コードとプロジェクト構成 インタフェースによる抽象化やパッケージレベルでの品質向上 データ型 スライス、マップを中心に背景のデータ構造から効率的な使い方を知る 制御構造 ループでのありがちなミス等を紹介 文字列 文字列のデータ構造と扱い方 関数とメソッド レシーバ、引数、返り値のベストプラクティス エラー管理 panic、ラップなどエラー処理の基本 並行処理：基本編 並行処理とは何か、Goでの扱われ方とありがちなミスについて 並行処理：実践編 チャネルやMutexを利用した高度な同期手法について 標準ライブラリ time, json, sql, httpなどの標準ライブラリの使い方、ありがちなミスを紹介 テスト Goのテストに便利なパッケージ、効率の良い実行方法について 最適化 GPUのキャッシュを背景に効率の良いコードの書き方、プロファイルの手法について 良かった点 全体的な特徴として感じたのは、解説の分量が特定の分野に寄っていないので、ユースケースを満遍なくカバーしていること。 また、各解説の中ではスライスやマップのデータ構造を共通軸に持っているものが多く、その辺の基本的な理解を汎用的なケースに応用できるようになっていると感じました。\n並行処理についての記述もかなり充実していて良かったです。 この本で一番ページが割かれている部分でもあり、章として2つに分かれています。 基本編ではそもそも並行処理とは何か、GoのランタイムとCPUコアの関係といった基礎知識から説明しているので、実際に並行処理を書いた経験が少ない人も読みやすいと思います。\n微妙だった点 翻訳本に共通する問題かと思うんですが、多少読みにくさはあります。 別に冗長ということでもないんですが、目が滑る感覚があって多少読むのに時間がかかりました。\nまとめ とりあえず、Goをガンガン使っている人は読んでおいて損はないと思います。\nこの本で扱われているTipsにはベストプラクティス（こうした方がいい）と、アンチパターン（これしちゃダメ）があります。 このうちアンチパターンの方は知っていないと避けられないものもあるので、特に重要だと思います。 なので、ざーっと目を通しておいてアンチパターンに遭遇したとき「なんかこれヤバそうだな」と思える程度にアンテナを張っておくのもオススメの読み方です。\n個人的には、ループ内でのスライス、deferの扱いが特に参考になりました。 逆に、最適化の章はページ数が割かれている割に使う機会が少なそうだと感じました。 （章の最初に「読みやすいコードは最適化されて複雑なコードより良い」と明言されているので、実際著者としてもそういう認識と意図があるんだと思います。）\nかなりおすすめでーす。","title":"「Go言語 100Tips ありがちなミスを把握し、実装を最適化する」を読んだ"},{"content":"このブログでちょこちょこテック記事を書いてたんですが、zennに移植しました。\nもともと記事をGithubで管理したかったのと、特定のサービスに依存したくないという理由で自分のブログで記事を公開していました。\nこの前Zennのパブリケーション機能を知って、バイト先でも登録してもらいました。 試しに記事を書いてみたところ使いやすいし、どうやらGithubのリポジトリと連携できるようなので、移植してみました。\nそういうわけで、今後はこのブログではテック記事は書かないと思います。 今までの記事、新しい記事はZennの方で公開しています。\nhttps://zenn.dev/tbistr\n","permalink":"https://tbistr.github.io/posts/quit-tech-blog/","summary":"このブログでちょこちょこテック記事を書いてたんですが、zennに移植しました。\nもともと記事をGithubで管理したかったのと、特定のサービスに依存したくないという理由で自分のブログで記事を公開していました。\nこの前Zennのパブリケーション機能を知って、バイト先でも登録してもらいました。 試しに記事を書いてみたところ使いやすいし、どうやらGithubのリポジトリと連携できるようなので、移植してみました。\nそういうわけで、今後はこのブログではテック記事は書かないと思います。 今までの記事、新しい記事はZennの方で公開しています。\nhttps://zenn.dev/tbistr","title":"テック記事を自分のブログで公開するのをやめた"},{"content":"2023年上半期良かった曲 2023年も半分過ぎましたけど、体感起きてる時間の3分の2くらいはSpotifyで音楽聞いてるので、良かった曲を40曲紹介します。 プレイリスト公開しているので、こちらから聞いてみてね。\nSpotify契約していない貧乏人のためちょっとだけ聴けるリンクも貼っておきます。\n本編 ","permalink":"https://tbistr.github.io/posts/music/2023h1-my-best-hits/","summary":"2023年上半期良かった曲 2023年も半分過ぎましたけど、体感起きてる時間の3分の2くらいはSpotifyで音楽聞いてるので、良かった曲を40曲紹介します。 プレイリスト公開しているので、こちらから聞いてみてね。\nSpotify契約していない貧乏人のためちょっとだけ聴けるリンクも貼っておきます。\n本編 ","title":"2023年上半期に聞いてよかった曲"},{"content":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。\n","permalink":"https://tbistr.github.io/posts/about_me/","summary":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。","title":"自己紹介"}]