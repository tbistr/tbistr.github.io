[{"content":"何がしたいか Vagrantで立てたVMについて、デスクトップ環境(GNOMEとかLXDEとか)を導入して、GUI環境を実現させる方法は様々な紹介されている。\nしかし、デスクトップ環境の導入をすると、プロビジョニングのステップでapt-get install ubuntu-desktopなどする必要があり、めちゃめちゃ時間がかかる。\nここでは、VM内のアプリケーションをwindows上のウィンドウとして描画させることを目指す。\n仕組み 用語  X Window System (X11)  linuxがデファクトで使っている、ウィンドウ表示プロトコル。   X11クライアント  画面を描画してもらうアプリケーション。 今回の場合、ゲストOS上で動くアプリケーション。   X11サーバー  画面を描画する側。 今回の場合、ホストOSのウィンドウシステム。   vcXsrv  今回使うwindows向けX11サーバー。 X11サーバーは色々種類があるが、最近はこれが主流らしい。    実際の動き 下図のように、SSH経由で送信。 実践 準備 Chocolateyを使っているので、choco install vcxsrvでvcXsrvをインストール。\n(https://sourceforge.net/projects/vcxsrv/ からもインストールできる)\n起動すると設定項目が出る。 すべて初期設定で問題ない。\nタスクバーにX11のロゴが出ていたら準備完了。(簡単！！！)\nVagrantファイルの用意 最終的に、以下のようなVagrantファイルを用意する。\nVagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;bento/ubuntu-20.10\u0026#34; config.ssh.forward_x11 = true config.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL  apt-get update apt-get upgrade SHELL config.vm.provision \u0026#34;shell\u0026#34;, privileged: false, inline: \u0026lt;\u0026lt;-SHELL  echo \u0026#34;export DISPLAY=10.0.2.2:0\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile SHELL end そこまで解説することはないが、少しだけ。\nconfig.ssh.forward_x11 = trueは、X11を有効化するオプション。 これをtrueに設定することで、vagrant sshで接続したときに自動でx11を転送してくれる。\necho \u0026quot;export DISPLAY=10.0.2.2:0\u0026quot; \u0026gt;\u0026gt; ~/.bash_profileでは、X11でどこに描画するかを設定する。 virtual boxでは、ゲストからホストは10.0.2.2でアクセスすることができるので、このように設定する。\nprivileged: falseはプロビジョニングを非ルートユーザー(デフォはvagrantユーザー)で実行する設定。 これで~/がユーザーのホームになる。\n","permalink":"https://tbistr.github.io/posts/tech/vagrant_x11/","summary":"何がしたいか Vagrantで立てたVMについて、デスクトップ環境(GNOMEとかLXDEとか)を導入して、GUI環境を実現させる方法は様々な紹介されている。\nしかし、デスクトップ環境の導入をすると、プロビジョニングのステップでapt-get install ubuntu-desktopなどする必要があり、めちゃめちゃ時間がかかる。\nここでは、VM内のアプリケーションをwindows上のウィンドウとして描画させることを目指す。\n仕組み 用語  X Window System (X11)  linuxがデファクトで使っている、ウィンドウ表示プロトコル。   X11クライアント  画面を描画してもらうアプリケーション。 今回の場合、ゲストOS上で動くアプリケーション。   X11サーバー  画面を描画する側。 今回の場合、ホストOSのウィンドウシステム。   vcXsrv  今回使うwindows向けX11サーバー。 X11サーバーは色々種類があるが、最近はこれが主流らしい。    実際の動き 下図のように、SSH経由で送信。 実践 準備 Chocolateyを使っているので、choco install vcxsrvでvcXsrvをインストール。\n(https://sourceforge.net/projects/vcxsrv/ からもインストールできる)\n起動すると設定項目が出る。 すべて初期設定で問題ない。\nタスクバーにX11のロゴが出ていたら準備完了。(簡単！！！)\nVagrantファイルの用意 最終的に、以下のようなVagrantファイルを用意する。\nVagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;bento/ubuntu-20.10\u0026#34; config.ssh.forward_x11 = true config.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL  apt-get update apt-get upgrade SHELL config.vm.provision \u0026#34;shell\u0026#34;, privileged: false, inline: \u0026lt;\u0026lt;-SHELL  echo \u0026#34;export DISPLAY=10.","title":"Vagrantでデスクトップ環境はいらないけど、GUIアプリを使いたい"},{"content":"今回使ったツールなど hugo hugoは、go言語で書かれた静的サイトジェネレータ。 markdownで記事を書くことができ、有志が開発したテーマによって、簡単にキレイなサイトを作ることができる。\nhttps://gohugo.io/about/what-is-hugo/\ngithub pages githubのリポジトリに置いたファイル群を、専用のURL(独自ドメインもおk)に紐づけてホスティングしてくれるサービス。\nhttps://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\ngithub actions githubに対するpush, pull requestなどのアクションをトリガにして、ビルドや他サービスへのデプロイ、テストなどのアクションを実行してくれるサービス。(CI/CDとかいうやつですかね。)\nhttps://docs.github.com/ja/actions\nやってみる hugo https://gohugo.io/getting-started/quick-start/\nlinuxbrewに対応しているので、brew install hugoでインストールした。 windowsだとchocolatey、macだとhomebrewでインストールするのが楽だと思う。\n公式のクイックスタートガイドに沿って、ローカルで使い方を確認する。\nテーマ選び hugoでは複数テーマを好きなときに切り替えられるようになっているが、設定項目も全然違うので、気軽に切り替えるようなもんでもない。 そのため、ローカルで多少吟味してから決めると良さそう。\n今回は、以下の項目を評価して決めた。\n 必須の設定項目が多すぎない。 リポジトリやホームページに情報がちゃんと載ってる。 exampleサイトの実装がある。(情報がカスでも、最悪写せる。) 最新の更新が新しめ。  上3つを考慮してanankeを考えていたが、更新が途絶えていたためpaper-modを選択した。\n(おまけ)テーマの適用方法について ネット上の記事ではgit submoduleを使ってテーマを管理する方法が主流になっているが、最新版ではhugo modulesという機能を使うことができる。\n詳細は以下のURLを参考にして欲しいが、モジュール初期化後にconfig.ymlにインポートしたいパッケージ名を書けば良い。 (載ってないが、テーマの指定部分にパッケージ名を書くだけでいける。)\n中身はgo modulesを使っているらしい。\ngithub 普通にリポジトリを作成してpagesを設定すると、URLはhtps://[user_name].github.io/[repo_name]/になる。 自分のホームページ的な運用をしたいのであれば、リポジトリ名をuser_name.github.ioにすることで、https://[user_name].github.io/でホスティングしてくれる。\nとりあえず好きな方でリポジトリを作成し、hugoのディレクトリとしてhugo new siteしてプッシュする。\ngithub actions 今回は、mainブランチにpushしたときにビルドを走らせて、ホスティング対象となるファイルをgh-pagesブランチにcommitしてくれるactionsを採用した。 先人が必要な記述を用意してくれているので、ほぼそのままパクる。\nhttps://github.com/peaceiris/actions-hugo#getting-started を参考に、.github/worlflows/gh-pages.ymlを作成して、中身はそのままコピペする。 適当にコミットしてみて、リポジトリのactionsタブから、正常にビルドができていることを確認する。(コケてたら、hugo-versionをローカルと合わせてみると多分うまくいく。)\ngithub pages 作成したリポジトリのsettingsタブから、pages項目を開き、Sourceのブランチをgh-pages、ディレクトリを/rootに設定する。 (先述のactionsによるビルドが成功していれば、ブランチは自動で作成されているはず。)\nhugoの設定をイジる 必須な項目として、config.ymlのbaseURLを、pagesが対象にするURLに合わせる必要がある。 このサイトならhttps://tbistr.github.io/、pagesタブでYour site is published at https://ほげとされているURL。\nあとはローカルのhugo serverで確認しつつ好きなように設定する。\n","permalink":"https://tbistr.github.io/posts/tech/hugo_hands_on/","summary":"今回使ったツールなど hugo hugoは、go言語で書かれた静的サイトジェネレータ。 markdownで記事を書くことができ、有志が開発したテーマによって、簡単にキレイなサイトを作ることができる。\nhttps://gohugo.io/about/what-is-hugo/\ngithub pages githubのリポジトリに置いたファイル群を、専用のURL(独自ドメインもおk)に紐づけてホスティングしてくれるサービス。\nhttps://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\ngithub actions githubに対するpush, pull requestなどのアクションをトリガにして、ビルドや他サービスへのデプロイ、テストなどのアクションを実行してくれるサービス。(CI/CDとかいうやつですかね。)\nhttps://docs.github.com/ja/actions\nやってみる hugo https://gohugo.io/getting-started/quick-start/\nlinuxbrewに対応しているので、brew install hugoでインストールした。 windowsだとchocolatey、macだとhomebrewでインストールするのが楽だと思う。\n公式のクイックスタートガイドに沿って、ローカルで使い方を確認する。\nテーマ選び hugoでは複数テーマを好きなときに切り替えられるようになっているが、設定項目も全然違うので、気軽に切り替えるようなもんでもない。 そのため、ローカルで多少吟味してから決めると良さそう。\n今回は、以下の項目を評価して決めた。\n 必須の設定項目が多すぎない。 リポジトリやホームページに情報がちゃんと載ってる。 exampleサイトの実装がある。(情報がカスでも、最悪写せる。) 最新の更新が新しめ。  上3つを考慮してanankeを考えていたが、更新が途絶えていたためpaper-modを選択した。\n(おまけ)テーマの適用方法について ネット上の記事ではgit submoduleを使ってテーマを管理する方法が主流になっているが、最新版ではhugo modulesという機能を使うことができる。\n詳細は以下のURLを参考にして欲しいが、モジュール初期化後にconfig.ymlにインポートしたいパッケージ名を書けば良い。 (載ってないが、テーマの指定部分にパッケージ名を書くだけでいける。)\n中身はgo modulesを使っているらしい。\ngithub 普通にリポジトリを作成してpagesを設定すると、URLはhtps://[user_name].github.io/[repo_name]/になる。 自分のホームページ的な運用をしたいのであれば、リポジトリ名をuser_name.github.ioにすることで、https://[user_name].github.io/でホスティングしてくれる。\nとりあえず好きな方でリポジトリを作成し、hugoのディレクトリとしてhugo new siteしてプッシュする。\ngithub actions 今回は、mainブランチにpushしたときにビルドを走らせて、ホスティング対象となるファイルをgh-pagesブランチにcommitしてくれるactionsを採用した。 先人が必要な記述を用意してくれているので、ほぼそのままパクる。\nhttps://github.com/peaceiris/actions-hugo#getting-started を参考に、.github/worlflows/gh-pages.ymlを作成して、中身はそのままコピペする。 適当にコミットしてみて、リポジトリのactionsタブから、正常にビルドができていることを確認する。(コケてたら、hugo-versionをローカルと合わせてみると多分うまくいく。)\ngithub pages 作成したリポジトリのsettingsタブから、pages項目を開き、Sourceのブランチをgh-pages、ディレクトリを/rootに設定する。 (先述のactionsによるビルドが成功していれば、ブランチは自動で作成されているはず。)\nhugoの設定をイジる 必須な項目として、config.ymlのbaseURLを、pagesが対象にするURLに合わせる必要がある。 このサイトならhttps://tbistr.github.io/、pagesタブでYour site is published at https://ほげとされているURL。\nあとはローカルのhugo serverで確認しつつ好きなように設定する。","title":"hugoお試ししてみた。"},{"content":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。\n","permalink":"https://tbistr.github.io/posts/about_me/","summary":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。","title":"自己紹介"}]