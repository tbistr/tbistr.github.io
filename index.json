[{"content":"概要 原因はUSBでつながっていたXInputのコントローラ。 デバイスを抜くことで解決。\n状況 症状  VirtualboxのGUIが起動しない vagrant upが失敗する VBoxManage.exeコマンドに応答がない  helpは表示できるが、vmのリスト等は出ない    環境  i7-12700 32gb windows11 pro virtualbox 6.1.32  chocolateyでインストール   wsl, dockerがインストールされている ハイパーバイザプラットフォーム有効化済み  確認したこと、やってみたこと  タスクマネージャの確認 virtualboxの再インストール vagrantの再インストール OSのクリーンインストール  タスクマネージャの確認 「バックグラウンドプロセス」のタブにこの3つのプロセスが存在した。\n Virtualbox Interface Virtualbox Global Interface Virtualbox Manager  本来は、Virtualbox Managerは「アプリ」のタブにあるべき。 起動を試みるたびに、Virtualbox Managerは増えていき、ゾンビプロセスになった。\nvirtualbox, vagrantの再インストール chocolatey版、msiインストーラ版両方試したが効果なし。\nOSのクリーンインストール しばらくは問題が起きなくなったが、ある日突然再発。\n原因と解決方法 VM起動時にエラーが発生し、いつもどおり原因をググっていたところ、同じような問題がOracleのフォーラムに投稿されていることに気がついた。\nhttps://forums.virtualbox.org/viewtopic.php?t=97261\n昨年10月に、このような投稿があった。\n Re: GUI not appearing\nPostby LeonJi » 4. Oct 2021, 04:11\nI also got this problem this morning.\nFinally, I found an usb device(wireless adaptor for game controller) was the root cause.\nAfter removing this device, the GUI appeared immediately.\nSo I guess , VB detects the usb devices and can not recogize it , some how it comes into an infinite loop before completing the initialization process.\n 要約すると、 「根本的な原因はゲームのコントローラが接続されていることだった。アプリの初期化時にUSBデバイスを見ており、コントローラを抜いたら解決した。」 と言っている。\n私のPCにもUSBゲームコントローラが有線接続しっぱなしになっていたので、取り除いてvirtualboxを起動してみたところ、正常に起動した。\nやはり原因としてはフォーラムの投稿にあるように、「初期化時にUSBデバイスをチェックするが、ゲームのコントローラに対応できずに無限ループになる。」ということであると考えられる。\nタイムアウト処理か、起動後にチェックするようにして欲しいが、バグ報告はOracle会員にならないといけないし、フォーラム経由で既に開発チームに認識されているっぽいので放置。\nおまけ 使っていたコントローラはこれ。\nhttps://www.amazon.co.jp/gp/product/B08NPJ1GTC\n普通に質が良く、ジャイロ対応でSwitchでもPCでも安定して使えるのでオススメ。\n","permalink":"https://tbistr.github.io/posts/tech/vb_usb_bug/","summary":"概要 原因はUSBでつながっていたXInputのコントローラ。 デバイスを抜くことで解決。\n状況 症状  VirtualboxのGUIが起動しない vagrant upが失敗する VBoxManage.exeコマンドに応答がない  helpは表示できるが、vmのリスト等は出ない    環境  i7-12700 32gb windows11 pro virtualbox 6.1.32  chocolateyでインストール   wsl, dockerがインストールされている ハイパーバイザプラットフォーム有効化済み  確認したこと、やってみたこと  タスクマネージャの確認 virtualboxの再インストール vagrantの再インストール OSのクリーンインストール  タスクマネージャの確認 「バックグラウンドプロセス」のタブにこの3つのプロセスが存在した。\n Virtualbox Interface Virtualbox Global Interface Virtualbox Manager  本来は、Virtualbox Managerは「アプリ」のタブにあるべき。 起動を試みるたびに、Virtualbox Managerは増えていき、ゾンビプロセスになった。\nvirtualbox, vagrantの再インストール chocolatey版、msiインストーラ版両方試したが効果なし。\nOSのクリーンインストール しばらくは問題が起きなくなったが、ある日突然再発。\n原因と解決方法 VM起動時にエラーが発生し、いつもどおり原因をググっていたところ、同じような問題がOracleのフォーラムに投稿されていることに気がついた。\nhttps://forums.virtualbox.org/viewtopic.php?t=97261\n昨年10月に、このような投稿があった。\n Re: GUI not appearing\nPostby LeonJi » 4.","title":"Virtualbox Manager (GUI)が起動しないバグと解決方法"},{"content":"概要 卒論のために久しぶりにTeX環境を作る必要があったので、TeX Liveがfullでインストールされたコンテナイメージを探していたのですが、無かったので作りました。 通常のインストール手順ではハマるポイントがあったのでパッケージマネージャを使わない方法でインストールしました。\ndevcontainer化することで、vscodeから立ち上げるだけで補完、プレビューが使えるようになっています。\ndevcontainer devcontainerとは、vscodeの（拡張）機能の1つで、これを利用することで用意したコンテナの中にワークスペースフォルダをマウントし、コンテナ内のコマンド、環境を使うことができます。 また、拡張機能、設定についても指定したものを使うことができます（ローカルのvscodeにはインストールされません）。 これにより、環境の分離、チーム内での共通化ができます。\n参考：devcontainerのチュートリアル\nネット上に存在するTeX用Dockerイメージ ネット上には、フルインストール版、日本語に必要なモジュールに限定した版の両方について、様々なイメージが存在しています。 しかし、日本語環境がうまく入らない、texindex（フォーマッタ）が動作しないなど、日本語環境で常用するには不具合が発生しました。 執筆中に試してみたら、公式が配布しているtexlive/texliveイメージはちゃんと全部動きました。。。まあ、見なかったことにします。 また、fullと謳っていながら実際にはモジュールに不足があるイメージもあります（主に日本語関係のモジュールがない）。\n制作内容 全容はGithubのリポジトリから参照できます。\ntex.profile texを非対話的に（ビルド時にユーザーがオプション等を選択しない）インストールするのに必要な設定ファイルです。 今回は、このファイルによるスキーマ指定がしたかったため、aptは使わずに、ソースからインストールしています。\nselected_scheme scheme-fullでfullバージョンを指定しています。\nその他で肝要な部分は、option_doc 0とoption_src 0です。 fullでインストールすると、ドキュメントとソースを含むだけで2GB近く消費してしまいます。 そのため、このオプションで除外しておきます。\nselected_scheme scheme-full TEXDIR /opt/texlive/2021 TEXMFCONFIG ~/.texlive2021/texmf-config TEXMFHOME ~/texmf TEXMFLOCAL /opt/texlive/texmf-local TEXMFSYSCONFIG /opt/texlive/2021/texmf-config TEXMFSYSVAR /opt/texlive/2021/texmf-var TEXMFVAR ~/.texlive2021/texmf-var binary_x86_64-darwin 0 binary_x86_64-linux 1 binary_win32 0 option_doc 0 option_src 0 option_adjustrepo 0 余談ですが、この設定ファイルの書式、TeX Liveのリファレンスにも見つけられませんでした（一度デフォルト設定でビルドすると出力されるから、それを改変しろ。ということらしい。）\nDockerfile 本体となるDocekrfileです。 ベースにはmicrosoftが公開しているdevcontainer用に設定されたイメージを使用しました。 基本的なutil系コマンドがインストール済みです。\nそれ以降の処理はコメントに記載してあるとおりです。\nFROMmcr.microsoft.com/vscode/devcontainers/base:ubuntu-21.04COPY tex.profile ./# 日本のミラーサーバからTeX Live 2021をダウンロードしてくるRUN wget https://texlive.texjp.org/2021/tlnet/install-tl-unx.tar.gz \\  \u0026amp;\u0026amp; mkdir install-tl \\  \u0026amp;\u0026amp; tar xzf install-tl-unx.tar.gz -C install-tl --strip-components 1 \\ # 解凍 \u0026amp;\u0026amp; ./install-tl/install-tl \\ # インストールスクリプトを起動 --profile ./tex.profile \\ # 先述のプロファイルを指定する --repository http://texlive.texjp.org/2021/tlnet \\ # 依存のDL元も日本のミラーサーバ \u0026amp;\u0026amp; rm -r install-tl-unx.tar.gz install-tl# latexindentを使うために必要なperlのモジュールをaptで取得する。# cpan（perlのパッケージマネージャ）でのインストールはperl外の依存（makeとか）を必要とするため、対応するものをaptで探した。RUN apt-get update \\  \u0026amp;\u0026amp; apt-get install -y --no-install-recommends \\  libyaml-tiny-perl \\  libfile-homedir-perl \\  libunicode-linebreak-perl \\  \u0026amp;\u0026amp; apt-get autoremove -y \\  \u0026amp;\u0026amp; apt-get clean -y \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*USERvscode# 環境変数の更新RUN echo \u0026#39;export PATH=\u0026#34;$PATH:/opt/texlive/2021/bin/x86_64-linux\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrcまた、本番リポジトリではこのDockerfileをビルド、Dockerhubにアップしたものをpullしてくる様になっています。 そのため、通常のtexliveのインストール、ビルドよりも大幅に短期間でセットアップできます。 （一度pullしておけば再起動は爆速。）\nその他 latexmkrc（texからPDFへのビルド手順を定義したファイル）と、settings.json（vscodeの設定）については、このリポジトリを参考にしています。\nまとめ 以上の内容をテンプレートリポジトリとしてこちらにアップしました。 補完、フォーマットも効いて、エラーは該当ラインに表示、ファイルの保存時に自動的にビルドするなど、手間の割になかなか便利に使えると思います。 是非使ってみてください。\n","permalink":"https://tbistr.github.io/posts/tech/tex_devcontainer/","summary":"概要 卒論のために久しぶりにTeX環境を作る必要があったので、TeX Liveがfullでインストールされたコンテナイメージを探していたのですが、無かったので作りました。 通常のインストール手順ではハマるポイントがあったのでパッケージマネージャを使わない方法でインストールしました。\ndevcontainer化することで、vscodeから立ち上げるだけで補完、プレビューが使えるようになっています。\ndevcontainer devcontainerとは、vscodeの（拡張）機能の1つで、これを利用することで用意したコンテナの中にワークスペースフォルダをマウントし、コンテナ内のコマンド、環境を使うことができます。 また、拡張機能、設定についても指定したものを使うことができます（ローカルのvscodeにはインストールされません）。 これにより、環境の分離、チーム内での共通化ができます。\n参考：devcontainerのチュートリアル\nネット上に存在するTeX用Dockerイメージ ネット上には、フルインストール版、日本語に必要なモジュールに限定した版の両方について、様々なイメージが存在しています。 しかし、日本語環境がうまく入らない、texindex（フォーマッタ）が動作しないなど、日本語環境で常用するには不具合が発生しました。 執筆中に試してみたら、公式が配布しているtexlive/texliveイメージはちゃんと全部動きました。。。まあ、見なかったことにします。 また、fullと謳っていながら実際にはモジュールに不足があるイメージもあります（主に日本語関係のモジュールがない）。\n制作内容 全容はGithubのリポジトリから参照できます。\ntex.profile texを非対話的に（ビルド時にユーザーがオプション等を選択しない）インストールするのに必要な設定ファイルです。 今回は、このファイルによるスキーマ指定がしたかったため、aptは使わずに、ソースからインストールしています。\nselected_scheme scheme-fullでfullバージョンを指定しています。\nその他で肝要な部分は、option_doc 0とoption_src 0です。 fullでインストールすると、ドキュメントとソースを含むだけで2GB近く消費してしまいます。 そのため、このオプションで除外しておきます。\nselected_scheme scheme-full TEXDIR /opt/texlive/2021 TEXMFCONFIG ~/.texlive2021/texmf-config TEXMFHOME ~/texmf TEXMFLOCAL /opt/texlive/texmf-local TEXMFSYSCONFIG /opt/texlive/2021/texmf-config TEXMFSYSVAR /opt/texlive/2021/texmf-var TEXMFVAR ~/.texlive2021/texmf-var binary_x86_64-darwin 0 binary_x86_64-linux 1 binary_win32 0 option_doc 0 option_src 0 option_adjustrepo 0 余談ですが、この設定ファイルの書式、TeX Liveのリファレンスにも見つけられませんでした（一度デフォルト設定でビルドすると出力されるから、それを改変しろ。ということらしい。）\nDockerfile 本体となるDocekrfileです。 ベースにはmicrosoftが公開しているdevcontainer用に設定されたイメージを使用しました。 基本的なutil系コマンドがインストール済みです。\nそれ以降の処理はコメントに記載してあるとおりです。\nFROMmcr.microsoft.com/vscode/devcontainers/base:ubuntu-21.04COPY tex.profile ./# 日本のミラーサーバからTeX Live 2021をダウンロードしてくるRUN wget https://texlive.texjp.org/2021/tlnet/install-tl-unx.tar.gz \\  \u0026amp;\u0026amp; mkdir install-tl \\  \u0026amp;\u0026amp; tar xzf install-tl-unx.","title":"texlive2021の最強環境を作ったよ"},{"content":"何がしたいか Vagrantで立てたVMについて、デスクトップ環境(GNOMEとかLXDEとか)を導入して、GUI環境を実現させる方法は様々な紹介されている。\nしかし、デスクトップ環境の導入をすると、プロビジョニングのステップでapt-get install ubuntu-desktopなどする必要があり、めちゃめちゃ時間がかかる。\nここでは、VM内のアプリケーションをwindows上のウィンドウとして描画させることを目指す。\n仕組み 用語  X Window System (X11)  linuxがデファクトで使っている、ウィンドウ表示プロトコル。   X11クライアント  画面を描画してもらうアプリケーション。 今回の場合、ゲストOS上で動くアプリケーション。   X11サーバー  画面を描画する側。 今回の場合、ホストOSのウィンドウシステム。   vcXsrv  今回使うwindows向けX11サーバー。 X11サーバーは色々種類があるが、最近はこれが主流らしい。    実際の動き 下図のように、SSH経由で送信。 実践 準備 Chocolateyを使っているので、choco install vcxsrvでvcXsrvをインストール。\n(https://sourceforge.net/projects/vcxsrv/ からもインストールできる)\n起動すると設定項目が出る。 すべて初期設定で問題ない。\nタスクバーにX11のロゴが出ていたら準備完了。(簡単！！！)\nVagrantファイルの用意 最終的に、以下のようなVagrantファイルを用意する。\nVagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;bento/ubuntu-20.10\u0026#34; config.ssh.forward_x11 = true config.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL  apt-get update apt-get upgrade SHELL config.vm.provision \u0026#34;shell\u0026#34;, privileged: false, inline: \u0026lt;\u0026lt;-SHELL  echo \u0026#34;export DISPLAY=10.0.2.2:0\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile SHELL end そこまで解説することはないが、少しだけ。\nconfig.ssh.forward_x11 = trueは、X11を有効化するオプション。 これをtrueに設定することで、vagrant sshで接続したときに自動でx11を転送してくれる。\necho \u0026quot;export DISPLAY=10.0.2.2:0\u0026quot; \u0026gt;\u0026gt; ~/.bash_profileでは、X11でどこに描画するかを設定する。 virtual boxでは、ゲストからホストは10.0.2.2でアクセスすることができるので、このように設定する。\nprivileged: falseはプロビジョニングを非ルートユーザー(デフォはvagrantユーザー)で実行する設定。 これで~/がユーザーのホームになる。\n","permalink":"https://tbistr.github.io/posts/tech/vagrant_x11/","summary":"何がしたいか Vagrantで立てたVMについて、デスクトップ環境(GNOMEとかLXDEとか)を導入して、GUI環境を実現させる方法は様々な紹介されている。\nしかし、デスクトップ環境の導入をすると、プロビジョニングのステップでapt-get install ubuntu-desktopなどする必要があり、めちゃめちゃ時間がかかる。\nここでは、VM内のアプリケーションをwindows上のウィンドウとして描画させることを目指す。\n仕組み 用語  X Window System (X11)  linuxがデファクトで使っている、ウィンドウ表示プロトコル。   X11クライアント  画面を描画してもらうアプリケーション。 今回の場合、ゲストOS上で動くアプリケーション。   X11サーバー  画面を描画する側。 今回の場合、ホストOSのウィンドウシステム。   vcXsrv  今回使うwindows向けX11サーバー。 X11サーバーは色々種類があるが、最近はこれが主流らしい。    実際の動き 下図のように、SSH経由で送信。 実践 準備 Chocolateyを使っているので、choco install vcxsrvでvcXsrvをインストール。\n(https://sourceforge.net/projects/vcxsrv/ からもインストールできる)\n起動すると設定項目が出る。 すべて初期設定で問題ない。\nタスクバーにX11のロゴが出ていたら準備完了。(簡単！！！)\nVagrantファイルの用意 最終的に、以下のようなVagrantファイルを用意する。\nVagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;bento/ubuntu-20.10\u0026#34; config.ssh.forward_x11 = true config.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL  apt-get update apt-get upgrade SHELL config.vm.provision \u0026#34;shell\u0026#34;, privileged: false, inline: \u0026lt;\u0026lt;-SHELL  echo \u0026#34;export DISPLAY=10.","title":"Vagrantでデスクトップ環境はいらないけど、GUIアプリを使いたい"},{"content":"今回使ったツールなど hugo hugoは、go言語で書かれた静的サイトジェネレータ。 markdownで記事を書くことができ、有志が開発したテーマによって、簡単にキレイなサイトを作ることができる。\nhttps://gohugo.io/about/what-is-hugo/\ngithub pages githubのリポジトリに置いたファイル群を、専用のURL(独自ドメインもおk)に紐づけてホスティングしてくれるサービス。\nhttps://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\ngithub actions githubに対するpush, pull requestなどのアクションをトリガにして、ビルドや他サービスへのデプロイ、テストなどのアクションを実行してくれるサービス。(CI/CDとかいうやつですかね。)\nhttps://docs.github.com/ja/actions\nやってみる hugo https://gohugo.io/getting-started/quick-start/\nlinuxbrewに対応しているので、brew install hugoでインストールした。 windowsだとchocolatey、macだとhomebrewでインストールするのが楽だと思う。\n公式のクイックスタートガイドに沿って、ローカルで使い方を確認する。\nテーマ選び hugoでは複数テーマを好きなときに切り替えられるようになっているが、設定項目も全然違うので、気軽に切り替えるようなもんでもない。 そのため、ローカルで多少吟味してから決めると良さそう。\n今回は、以下の項目を評価して決めた。\n 必須の設定項目が多すぎない。 リポジトリやホームページに情報がちゃんと載ってる。 exampleサイトの実装がある。(情報がカスでも、最悪写せる。) 最新の更新が新しめ。  上3つを考慮してanankeを考えていたが、更新が途絶えていたためpaper-modを選択した。\n(おまけ)テーマの適用方法について ネット上の記事ではgit submoduleを使ってテーマを管理する方法が主流になっているが、最新版ではhugo modulesという機能を使うことができる。\n詳細は以下のURLを参考にして欲しいが、モジュール初期化後にconfig.ymlにインポートしたいパッケージ名を書けば良い。 (載ってないが、テーマの指定部分にパッケージ名を書くだけでいける。)\n中身はgo modulesを使っているらしい。\ngithub 普通にリポジトリを作成してpagesを設定すると、URLはhtps://[user_name].github.io/[repo_name]/になる。 自分のホームページ的な運用をしたいのであれば、リポジトリ名をuser_name.github.ioにすることで、https://[user_name].github.io/でホスティングしてくれる。\nとりあえず好きな方でリポジトリを作成し、hugoのディレクトリとしてhugo new siteしてプッシュする。\ngithub actions 今回は、mainブランチにpushしたときにビルドを走らせて、ホスティング対象となるファイルをgh-pagesブランチにcommitしてくれるactionsを採用した。 先人が必要な記述を用意してくれているので、ほぼそのままパクる。\nhttps://github.com/peaceiris/actions-hugo#getting-started を参考に、.github/worlflows/gh-pages.ymlを作成して、中身はそのままコピペする。 適当にコミットしてみて、リポジトリのactionsタブから、正常にビルドができていることを確認する。(コケてたら、hugo-versionをローカルと合わせてみると多分うまくいく。)\ngithub pages 作成したリポジトリのsettingsタブから、pages項目を開き、Sourceのブランチをgh-pages、ディレクトリを/rootに設定する。 (先述のactionsによるビルドが成功していれば、ブランチは自動で作成されているはず。)\nhugoの設定をイジる 必須な項目として、config.ymlのbaseURLを、pagesが対象にするURLに合わせる必要がある。 このサイトならhttps://tbistr.github.io/、pagesタブでYour site is published at https://ほげとされているURL。\nあとはローカルのhugo serverで確認しつつ好きなように設定する。\n","permalink":"https://tbistr.github.io/posts/tech/hugo_hands_on/","summary":"今回使ったツールなど hugo hugoは、go言語で書かれた静的サイトジェネレータ。 markdownで記事を書くことができ、有志が開発したテーマによって、簡単にキレイなサイトを作ることができる。\nhttps://gohugo.io/about/what-is-hugo/\ngithub pages githubのリポジトリに置いたファイル群を、専用のURL(独自ドメインもおk)に紐づけてホスティングしてくれるサービス。\nhttps://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\ngithub actions githubに対するpush, pull requestなどのアクションをトリガにして、ビルドや他サービスへのデプロイ、テストなどのアクションを実行してくれるサービス。(CI/CDとかいうやつですかね。)\nhttps://docs.github.com/ja/actions\nやってみる hugo https://gohugo.io/getting-started/quick-start/\nlinuxbrewに対応しているので、brew install hugoでインストールした。 windowsだとchocolatey、macだとhomebrewでインストールするのが楽だと思う。\n公式のクイックスタートガイドに沿って、ローカルで使い方を確認する。\nテーマ選び hugoでは複数テーマを好きなときに切り替えられるようになっているが、設定項目も全然違うので、気軽に切り替えるようなもんでもない。 そのため、ローカルで多少吟味してから決めると良さそう。\n今回は、以下の項目を評価して決めた。\n 必須の設定項目が多すぎない。 リポジトリやホームページに情報がちゃんと載ってる。 exampleサイトの実装がある。(情報がカスでも、最悪写せる。) 最新の更新が新しめ。  上3つを考慮してanankeを考えていたが、更新が途絶えていたためpaper-modを選択した。\n(おまけ)テーマの適用方法について ネット上の記事ではgit submoduleを使ってテーマを管理する方法が主流になっているが、最新版ではhugo modulesという機能を使うことができる。\n詳細は以下のURLを参考にして欲しいが、モジュール初期化後にconfig.ymlにインポートしたいパッケージ名を書けば良い。 (載ってないが、テーマの指定部分にパッケージ名を書くだけでいける。)\n中身はgo modulesを使っているらしい。\ngithub 普通にリポジトリを作成してpagesを設定すると、URLはhtps://[user_name].github.io/[repo_name]/になる。 自分のホームページ的な運用をしたいのであれば、リポジトリ名をuser_name.github.ioにすることで、https://[user_name].github.io/でホスティングしてくれる。\nとりあえず好きな方でリポジトリを作成し、hugoのディレクトリとしてhugo new siteしてプッシュする。\ngithub actions 今回は、mainブランチにpushしたときにビルドを走らせて、ホスティング対象となるファイルをgh-pagesブランチにcommitしてくれるactionsを採用した。 先人が必要な記述を用意してくれているので、ほぼそのままパクる。\nhttps://github.com/peaceiris/actions-hugo#getting-started を参考に、.github/worlflows/gh-pages.ymlを作成して、中身はそのままコピペする。 適当にコミットしてみて、リポジトリのactionsタブから、正常にビルドができていることを確認する。(コケてたら、hugo-versionをローカルと合わせてみると多分うまくいく。)\ngithub pages 作成したリポジトリのsettingsタブから、pages項目を開き、Sourceのブランチをgh-pages、ディレクトリを/rootに設定する。 (先述のactionsによるビルドが成功していれば、ブランチは自動で作成されているはず。)\nhugoの設定をイジる 必須な項目として、config.ymlのbaseURLを、pagesが対象にするURLに合わせる必要がある。 このサイトならhttps://tbistr.github.io/、pagesタブでYour site is published at https://ほげとされているURL。\nあとはローカルのhugo serverで確認しつつ好きなように設定する。","title":"hugoお試ししてみた。"},{"content":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。\n","permalink":"https://tbistr.github.io/posts/about_me/","summary":"基本情報 坪井正太郎といいます。 名古屋大学情報学部でCS、特に組込みシステムについて学んでいます。\nGo言語をよく書いていますが、Kotlinが好きです。Rustにも興味があり、組み込みRustとかを頑張っています。\n趣味はバイクで、HONDAの400Xに乗ってます。旅はそんなに好きじゃないので、毎日名古屋市内を流してます。\nそんなかんじ。追記するかも。","title":"自己紹介"}]